//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Receiver.DataFeedService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/InternalDataFeedService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TradeSummary", Namespace="http://schemas.datacontract.org/2004/07/InternalDataFeedService")]
    [System.SerializableAttribute()]
    public partial class TradeSummary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AdjustmentCloseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CloseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExchangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeFrameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VolumeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AdjustmentClose {
            get {
                return this.AdjustmentCloseField;
            }
            set {
                if ((this.AdjustmentCloseField.Equals(value) != true)) {
                    this.AdjustmentCloseField = value;
                    this.RaisePropertyChanged("AdjustmentClose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Close {
            get {
                return this.CloseField;
            }
            set {
                if ((this.CloseField.Equals(value) != true)) {
                    this.CloseField = value;
                    this.RaisePropertyChanged("Close");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Exchange {
            get {
                return this.ExchangeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExchangeField, value) != true)) {
                    this.ExchangeField = value;
                    this.RaisePropertyChanged("Exchange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double High {
            get {
                return this.HighField;
            }
            set {
                if ((this.HighField.Equals(value) != true)) {
                    this.HighField = value;
                    this.RaisePropertyChanged("High");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Low {
            get {
                return this.LowField;
            }
            set {
                if ((this.LowField.Equals(value) != true)) {
                    this.LowField = value;
                    this.RaisePropertyChanged("Low");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Open {
            get {
                return this.OpenField;
            }
            set {
                if ((this.OpenField.Equals(value) != true)) {
                    this.OpenField = value;
                    this.RaisePropertyChanged("Open");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SymbolID {
            get {
                return this.SymbolIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolIDField, value) != true)) {
                    this.SymbolIDField = value;
                    this.RaisePropertyChanged("SymbolID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeFrame {
            get {
                return this.TimeFrameField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeFrameField, value) != true)) {
                    this.TimeFrameField = value;
                    this.RaisePropertyChanged("TimeFrame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDataTypeCollection", Namespace="http://schemas.datacontract.org/2004/07/InternalDataFeedService")]
    [System.SerializableAttribute()]
    public partial class EventDataTypeCollection : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Receiver.DataFeedService.TradeSummary[] EventMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Receiver.DataFeedService.TradeSummary[] EventMessage {
            get {
                return this.EventMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.EventMessageField, value) != true)) {
                    this.EventMessageField = value;
                    this.RaisePropertyChanged("EventMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataFeedService.IInternalDataFeedService", CallbackContract=typeof(Receiver.DataFeedService.IInternalDataFeedServiceCallback))]
    public interface IInternalDataFeedService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInternalDataFeedService/GetData", ReplyAction="http://tempuri.org/IInternalDataFeedService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInternalDataFeedService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IInternalDataFeedService/GetDataUsingDataContractResponse")]
        Receiver.DataFeedService.CompositeType GetDataUsingDataContract(Receiver.DataFeedService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInternalDataFeedService/GetTradeSummaryData", ReplyAction="http://tempuri.org/IInternalDataFeedService/GetTradeSummaryDataResponse")]
        Receiver.DataFeedService.TradeSummary[] GetTradeSummaryData(string symbol, int interval, string exchange, System.DateTime beginDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInternalDataFeedService/GetTradeSummaryDataAsynch", ReplyAction="http://tempuri.org/IInternalDataFeedService/GetTradeSummaryDataAsynchResponse")]
        void GetTradeSummaryDataAsynch(string clientName, string symbol, int interval, string exchange, System.DateTime beginDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInternalDataFeedService/GetTradeSummaryDataSingleDataPointAsy" +
            "nch", ReplyAction="http://tempuri.org/IInternalDataFeedService/GetTradeSummaryDataSingleDataPointAsy" +
            "nchResponse")]
        void GetTradeSummaryDataSingleDataPointAsynch(string clientName, string symbol, int interval, string exchange, System.DateTime beginDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInternalDataFeedService/GetSymbolList", ReplyAction="http://tempuri.org/IInternalDataFeedService/GetSymbolListResponse")]
        string[] GetSymbolList(string exchange);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInternalDataFeedService/RegisterClient")]
        void RegisterClient(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInternalDataFeedService/NotifyServer")]
        void NotifyServer(Receiver.DataFeedService.EventDataTypeCollection eventData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInternalDataFeedServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInternalDataFeedService/BroadcastToClient")]
        void BroadcastToClient(Receiver.DataFeedService.EventDataTypeCollection eventData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInternalDataFeedServiceChannel : Receiver.DataFeedService.IInternalDataFeedService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InternalDataFeedServiceClient : System.ServiceModel.DuplexClientBase<Receiver.DataFeedService.IInternalDataFeedService>, Receiver.DataFeedService.IInternalDataFeedService {
        
        public InternalDataFeedServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public InternalDataFeedServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public InternalDataFeedServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InternalDataFeedServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InternalDataFeedServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public Receiver.DataFeedService.CompositeType GetDataUsingDataContract(Receiver.DataFeedService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public Receiver.DataFeedService.TradeSummary[] GetTradeSummaryData(string symbol, int interval, string exchange, System.DateTime beginDate) {
            return base.Channel.GetTradeSummaryData(symbol, interval, exchange, beginDate);
        }
        
        public void GetTradeSummaryDataAsynch(string clientName, string symbol, int interval, string exchange, System.DateTime beginDate) {
            base.Channel.GetTradeSummaryDataAsynch(clientName, symbol, interval, exchange, beginDate);
        }
        
        public void GetTradeSummaryDataSingleDataPointAsynch(string clientName, string symbol, int interval, string exchange, System.DateTime beginDate) {
            base.Channel.GetTradeSummaryDataSingleDataPointAsynch(clientName, symbol, interval, exchange, beginDate);
        }
        
        public string[] GetSymbolList(string exchange) {
            return base.Channel.GetSymbolList(exchange);
        }
        
        public void RegisterClient(string clientName) {
            base.Channel.RegisterClient(clientName);
        }
        
        public void NotifyServer(Receiver.DataFeedService.EventDataTypeCollection eventData) {
            base.Channel.NotifyServer(eventData);
        }
    }
}
